version: '3.8'

services:
  # 백엔드 서비스
  backend:
    build:
      context: .
      dockerfile: Dockerfile-backend
    image: suho1/having-backend:latest
    container_name: having-backend
    ports:
      - "8080:8080" # 백엔드 API 포트
    depends_on:
      - db
      - redis
    environment:
      # Docker 환경용 프로필 활성화
      - SPRING_PROFILES_ACTIVE=dev
      # application-docker.properties에서 사용하는 변수들
      - DB_URL=jdbc:mariadb://db:3306/studygroup
      - DB_USERNAME=root
      - DB_PASSWORD=${COMPOSE_DB_PASSWORD}
#      - REDIS_HOST=redis
#      - REDIS_PORT=6379
      - JWT_SECRET=${COMPOSE_JWT_SECRET}
      - GOOGLE_CLIENT_ID=${COMPOSE_GOOGLE_CLIENT_ID}
      - GOOGLE_CLIENT_SECRET=${COMPOSE_GOOGLE_CLIENT_SECRET}
      - GMAIL_USERNAME=${COMPOSE_GMAIL_USERNAME}
      - GMAIL_APP_PASSWORD=${COMPOSE_GMAIL_APP_PASSWORD}
      - APP_OAUTH2_REDIRECT_URI=${COMPOSE_APP_OAUTH2_REDIRECT_URI}
      - SPRING_DATA_REDIS_HOST=redis
      - SPRING_DATA_REDIS_PORT=6379
      # ... 기타 필요한 환경 변수 ...
    restart: always

  # 프론트엔드 서비스
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile-frontend
    image: suho1/having-frontend:latest
    container_name: having-frontend
    ports:
      #- "3000:80" # 내 컴퓨터 3000번 포트를 Nginx의 80번 포트와 연결
      - "80:80" # 3000번 대신 80번 포트 사용
    depends_on:
      - backend
    restart: always

  # 데이터베이스 서비스
  db:
    image: mariadb:10.6
    container_name: having-db
    environment:
      - MARIADB_ROOT_PASSWORD=${COMPOSE_DB_PASSWORD} # 위와 동일한 비밀번호
      - MARIADB_DATABASE=studygroup
    volumes:
      - db_data:/var/lib/mysql
    restart: always

  # Redis 서비스
  redis:
    image: redis:6.2-alpine
    container_name: having-redis
    volumes:
      - redis_data:/data
    restart: always

volumes:
  db_data:
  redis_data: